import { Injectable } from "@nestjs/common";import dayjs from "dayjs";import { DataSource, EntityTarget } from "typeorm";import { Item } from "src/items/entities/item.entity";import { DbCreateModels, DbUpdateModels } from "src/types/entities/generics.entities";import { User } from "src/users/entities/user.entity";import { LoggersService } from "../loggers/loggers.service";@Injectable()export class QuerybuildersService {  constructor(    private dataSource: DataSource,    private logger: LoggersService,  ) {    // this.entitiesList = this.dataSourc e.entityMetadatasMap;    // console.log("this.entitiesList.values()", this.entitiesList.values());  }  async createSingleEntity<T extends DbCreateModels>(    itemToCreate: T,    entityTarget: EntityTarget<User | Item>,  ) {    const formattedInput: T = { ...itemToCreate, createdAt: dayjs().toDate() };    const createdItem = await this.dataSource      .createQueryBuilder()      .insert()      .into(entityTarget)      .values(formattedInput)      .returning("*")      .execute();    this.logger.log(      `New database item created - table: ${entityTarget} - item: ${createdItem.raw.id}`,      createdItem,    );    return createdItem;  }  async createBulkEntity<T extends DbCreateModels>(    itemToCreate: T[],    entityTarget: EntityTarget<User | Item>,  ) {    const formattedInputs = itemToCreate.map((item) => ({ ...item, createdAt: dayjs().toDate() }));    const createdItems = await this.dataSource      .createQueryBuilder()      .insert()      .into(entityTarget)      .values(formattedInputs)      .returning("*")      .execute();    console.log("createdItems", createdItems);    this.logger.log(`New database item created - table: ${entityTarget} - items: }`, createdItems);    return createdItems;  }  async updateSingleEntity<T extends DbUpdateModels>(    itemToUpdate: T,    entityTarget: EntityTarget<User | Item>,  ) {    const formattedInput: T = { ...itemToUpdate, updatedAt: dayjs().toDate() };    const updatedItem = await this.dataSource      .createQueryBuilder<DbUpdateModels>(entityTarget, entityTarget.toString())      .update(entityTarget)      .set({ ...formattedInput })      .where("id = :id", { id: itemToUpdate.id })      .returning("*")      .execute();    this.logger.log(      `New database item created - table: ${entityTarget} - item: ${updatedItem.raw.id}`,      updatedItem,    );    return updatedItem;  }  /**   * Removes a database item with the given id from the specified entity.   *   * @param {T} id - The id of the item to be removed.   * @param {EntityTarget<DbUpdateModels>} entity - The entity from which the item should be removed.   * @return {Promise<T>} A promise that resolves to the removed item's id.   */  async remove(id: string, entity: EntityTarget<DbUpdateModels>): Promise<string> {    const deletedItem = await this.dataSource      .getRepository(entity)      .createQueryBuilder()      .delete()      .where("id = :id", { id })      .returning("id")      .execute();    console.log("deletedItem", deletedItem);    this.logger.log(      `New database item created - table: ${entity} - item: ${deletedItem.raw.id}`,      deletedItem,    );    return id;  }}